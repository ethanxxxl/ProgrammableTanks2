#+TITLE: csexp reader test
#+AUTHOR: Ethan Smith
#+EMAIL: ethansmith.dev@gmail.com

These are tests of the sexp reader.  This file will be parsed by the unit
tester, and feed every line beginning with a '>' character to the sexp_reader
function.  the output is compared against the line that directly follows it.

In future iterations, multiple lines may be used for the output.

the atom <NULL> is reserved.  It is used to indicate that ~sexp_reader~ should
fail to parse the input text.  It indicates that the reader should return NULL.

* depth=1 no tags
  - Input    :: (5:HELLO 6:WORLD!)
    - Assert :: (HELLO WORLD!)

  - Input    :: (5:HELLO6:WORLD!)
    - Assert :: (HELLO WORLD!)

* depth=1 tags
  - Input    :: ([3:STR] 22:this is a cool string!)
    - Assert :: ([STR]|this is a cool string!|)

* depth=1 tags and no tags
  - Input    :: (3:BAR (3:FOO 5:ETHAN) 12:Hello World!)
    + Assert :: (BAR (FOO ETHAN) |Hello World!|)
  - Input    :: (3:BAR (3:FOO 5:ETHAN))
    + Assert :: (BAR (FOO ETHAN))
  
* Empty Expressions
  - Input    :: ()
    - Assert :: ()

  - Input    :: (())
    - Assert :: (())

  - Input    :: (()())
    - Assert :: (() ())

  - Input    :: ((()))
    - Assert :: ((()))

  - Input    :: (((()())()))
    - Assert :: (((() ()) ()))

* Non-List Atoms
  - Input    :: 3:BAR
    - Assert :: BAR

  - Input :: 20:Atom With Mixed Case
    - Assert :: |Atom With Mixed Case|

  - Input :: 17:AtomWithMixedCase
    - Assert :: |AtomWithMixedCase|

  - Input :: [3:TAG] 4:ATOM
    - Assert :: [TAG]ATOM

  - Input :: [3:Tag]4:Atom
    - Assert :: [|Tag|]|Atom|
      
  - Input :: [3:TAG]4:Atom
    - Assert :: [TAG]|Atom|

  - Input :: [3:Tag]4:ATOM
    - Assert :: [|Tag|]ATOM


* Malformed Expressions - Open Groups
  - Input :: (
    - Assert :: @SEXP_RESULT_LIST_NOT_CLOSE
      
  - Input :: [
    - Assert :: @SEXP_RESULT_TAG_MISSING_TAG
      
  - Input :: "
    - Assert :: @SEXP_RESULT_QUOTE_NOT_CLOSED

* Malformed Expressions - Atoms
  - Input :: (5:TEST)
    - Assert :: @SEXP_RESULT_LIST_NOT_CLOSED
      
  - Input :: 0x12:rtxdefinitely
    - Assert :: @SEXP_RESULT_NETSTRING_MISSING_COLON
      
  - Input :: 0b 101o1o:definitely not
    - Assert :: @SEXP_RESULT_NETSTRING_MISSING_COLON
      
  - Input :: 001octal?:definitely not
    - Assert :: @SEXP_RESULT_NETSTRING_MISSING_COLON
      
  - Input :: (4ba:TEST)
    - Assert :: @SEXP_RESULT_NETSTRING_MISSING_COLON
      
  - Input :: (3foo)
    - Assert :: @SEXP_RESULT_NETSTRING_MISSING_COLON
      
* Malformed Expressions - Trailing Garbage
  - Input :: )
    - Assert :: @SEXP_RESULT_INVALID_CHARACTER
      
  - Input :: ]
    - Assert :: @SEXP_RESULT_INVALID_CHARACTER
      
  - Input :: ())
    - Assert :: @SEXP_RESULT_TRAILING_GARBAGE
      
  - Input :: ()()
    - Assert :: @SEXP_RESULT_TRAILING_GARBAGE

* Malformed Expressions - Tags
  - Input :: [3:TAG]
    - Assert :: @SEXP_RESULT_TAG_MISSING_SYMBOL
      
  - Input :: ([3:TAG])
    - Assert :: @SEXP_RESULT_TAG_MISSING_SYMBOL
      
  - Input :: ([3:TAG])
    - Assert :: @SEXP_RESULT_TAG_MISSING_SYMBOL
      
  - Input :: ([4:TAG1] [4:TAG2])
    - Assert :: @SEXP_RESULT_TAG_MISSING_SYMBOL
      
  - Input :: [two tags] atom
    - Assert :: @SEXP_RESULT_TAG_NOT_CLOSED

  - Input :: [] 3:TAG
    - Assert :: @SEXP_RESULT_TAG_MISSING_TAG

* Advanced Transport - Atoms
  - Input :: test
    - Assert :: TEST
      
  - Input :: 3:foo
    - Assert :: |foo|
      
  - Input :: |Multi Case and Spaces|
    - Assert :: |Multi Case and Spaces|
      
  - Input :: 24:|why would you do this?|
    - Assert :: 24:|why would you do this?|
    
* Advanced Transport - Tags
  - Input :: [cool] beans
    - Assert :: [COOL]BEANS
    

* Advanced Transport - Lists
  - Input :: (this is a sexp)
    - Assert :: (THIS IS A SEXP)
      
  - Input :: ([this]is a sexp)
    - Assert :: ([THIS]IS A SEXP)
      
  - Input :: (5:mixedatoms)
    - Assert :: (|mixed| ATOMS)

* Advanced Transport - Strings
  - Input :: "test"
    - Assert :: "test"
      
  - Input :: ("cool" "beans")
    - Assert :: ("cool" "beans")
      
  - Input :: ("real""close")
    - Assert :: ("real" "close")
      
  - Input :: ("embedded sexp: (this should be fine)")
    - Assert :: ("embedded sexp: (this should be fine)")
      
  - Input :: ("this" (is "a" test "of" ("strings on" multiple) "levels" ) "!")
    - Assert :: ("this" (IS "a" TEST "of" ("strings on" MULTIPLE) "levels") "!")
      
  - Input :: ("this"(is"a"test"of"("strings on"multiple)"levels")"!")
    - Assert :: ("this" (IS "a" TEST "of" ("strings on" MULTIPLE) "levels") "!")

* Advanced Transport - Numbers
  - Input :: (0 1 2 3 4 5)
    - Assert :: (0 1 2 3 4 5)

  - Input :: (tag0 0 tag1 1 tag2 2)
    - Assert :: (TAG0 0 TAG1 1 TAG2 2)
    
