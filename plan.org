#+TITLE: Programable Tanks 2
#+AUTHOR: Ethan Smith
#+EMAIL: ethansmith.dev@gmail.com

#+STARTUP: logdone overview
#+TODO: TODO STARTED DOCUMENT | DONE(d)

* Overview
  this is my second attempt to create a game/simulation of AI tank combat.

  in my last attempt, I was bogged down with creating a graphics frontend first
  and then attaching the logic to the backend.  I never really got around to
  implementing the logic because of this.

  With this project, I will start with creating the game logic/backend first,
  then add the graphics front end.  To visualize what is going on, I will
  certainly implement a simple TUI.

* Core Constructs
  To start, the scope of these core concepts will be constrained.  The mechanics
  will be similar to the online MMO Screeps.

** Tanks
   can have different attributes which give it abilities.
   - Movement
   - Attack
   - Cargo
   - Sensor Packages

** World
   A map of the world does not necessarily need to be maintained.  However, a
   list of world objects will need to be maintained.

   position updates and actions will need to be validated to ensure there are no
   conflicts or intersections.

** Threading
   This program will be multithreaded.  Threads may be used to send commands,
   run callbacks, etc.

*** World Update Thread
    every game tick, all world object positions will be updated.

*** Networking Thread
    connected clients need to be able to receive game information from the
    server and send updates to the server.

    Unlike Screeps, where all processing is done on the server, Programmable
    Tanks will use distributed computation.  For a player's game objects to be
    updated, the client must send the updates to the server.  Of course, these
    updates will be validated to ensure that no nefarious activity is performed
    by the player.

*** Server Graphics Thread

* Gameplay
  tanks are the fundamental unit of this game.  They are remote-controlled, yet
  programable.  That is, once spawned, a tank will not do anything on its own.
  Every tick must be given instructions.  The player may submit instructions
  over the network as frequently or infrequently as they desire.

  - establish production?
  - control zones?
  - fight battles?
     
  Perhaps the gameplay could be modeled after =Escape from Tarkov=, or =Dayz=.
  No production would have to be constantly monitored, and there could be a
  variety of different game modes.

  You could have different "rooms," "scenarios," "insertion points," etc.
  essentially these would be different coordinate spaces for tanks, and is where
  any given scenario would run.  You would be given information about the
  scenario beforehand, and you would have to prep your tank team accordingly.
  Once inserted, your tank team would not be able to receive resupply and would
  have to complete the mission the be extracted.  players would always have a
  certain number of basic tanks, /but upgrades could be found on the battlefield
  and be equipped between scenarios./ (This mechanic, sourced from escape from
  Tarkov, may or may not be necessary.)

  players would want to write scripts to control their tanks and allow them to
  manage the battlefield semi-autonomously.  The battlefields will be relatively
  large, and ticks ideally would occur relatively often, so the tank commander
  will want to have strategic level control at game time.  tactical level
  control should be controlled programmatically.

** Scenarios or Battlefields
   not entirely sure about the nomenclature just yet.  A battlefield may have
   multiple objectives available.  Only one objective will be shown per player.
   An objective may be to defend a certain object or area, or perhaps the
   objective is to take that area.  multiple players will enter the battlefield,
   and their objectives may or may not conflict with each other.  However, the
   possible number of objectives will be fixed, so players can develop programs
   for specific objectives.


** Objectives
   
   These are the objectives that will be available to players in any given
   battlefield.
   
*** Defend / Destroy Structure
    
*** Capture the Flag

*** Kill Enenmy Tanks


    
** Tank Mechanics
   Every tick/turn, a tank can complete one of these (mutually exclusive)
   actions:
   - Movement
   - Firing
   - Repair

     The server will resolve healing first, followed by movement, then firing.

* Program Structure
** DONE File Structure
   <2024-01-06 Sat>

   as the program has grown more complex, I found the need to reorganize the file
   structure, especially considering the abysmal state of ~client.c~. Below I
   consider two options for how to structure the filesystem.  I ended up going
   with option 2.
*** Option 1
   keep all sources together.  keep all includes together.
   
   - include/
     + client-headers/
     + server-headers/
     + common-header-1
     + common-header-2
     + ...
   - src/
     + client-src/
     + server-src/
     + common-src-1
     + common-src-2

*** Option 2
    separate the binaries, but keep the translation units common to both in
    a separate include.
   
    - include/
      + common-header-1
      + common-header-2
    - src/
      + common-src-1
      + common-src-2
       
    - client/
      + include/
      + src/
    - server/
      + include/
      + src/

    really what you are doing here is just creating multiple binaries and a
    couple libraries.  I like option 2 better.
    
** Connection Manager
   The initial layer is where incoming connections and data packets are received
   and deserialized.  Once the deserialization and post-processing are done, the
   resulting data is sent to the client manager layer.

** Player Client Manager
   After the packet has been reconstructed and is passed to this layer, the
   player managers will track the state of a player (what scenario are they in,
   player data, etc.) and handle the messages that the player is sending to the
   server.

** Scenario Manager
   If the player is in a scenario, then scenario messages will be sent to the
   applicable scenario layer to be validated and applied.  It is in the scenario
   where tank positions will be updated or scheduled.
    

* Networking Specification
  Network connections between the client (player) and the server are stateful.
  A client can be in one of three states: /Idle/, /Lobby/, or /Scenario/.  The
  client can transition between these states by sending the appropriate message
  to the server.

  The format of all messages that are sent between client and server is listed
  in subsequent sections.

** Header Structure
   All data encoded in a message will be in network order (big-endian). 

   Message header data will be 8 bytes in length, and consist of two fields:
   /Message Type/ and /Body Length/.

   #+CAPTION: Message Header
   | Byte |            0 |         1-4 |
   | Desc | Message Type | Body Length |

   While sets of messages sent by the client and server are mutually exclusive,
   each /Message Type/ will be unique.  Message Types from ~0x00~ through ~0x7f~
   originate from the client.  /Message Types/ from ~0x80~ through ~0xff~
   originate from the server.
         
** Message Type Summary
   #+CAPTION: Summary of Messages
   | /Message Type/ | Description              |
   |----------------+--------------------------|
   |           0x00 | REQUEST_AUTHENTICATE     |
   |           0x01 | REQUEST_LIST_SCENARIOS   |
   |           0x02 | REQUEST_CREATE_SCENARIO  |
   |           0x03 | REQUEST_JOIN_SCENARIO    |
   |           0x04 | REQUEST_PLAYER_UPDATE    |
   |           0x05 | REQUEST_RETURN_TO_LOBBY  |
   |           0x06 | REQUEST_DEBUG            |
   |----------------+--------------------------|
   |           0x80 | RESPONSE_SCENARIO_TICK   |
   |           0x81 | RESPONSE_SUCCESS         |
   |           0x82 | RESPONSE_FAIL            |
   |           0x83 | RESPONSE_INVALID_REQUEST |
   
** IDLE State Requests
   #+CAPTION: Messages sent by the client in the IDLE state
   | /Message Type/ | Description              |
   |----------------+--------------------------|
   |           0x00 | REQUEST_AUTHENTICATE     |
   

** LOBBY State Requests
   #+CAPTION: Messages sent by the client in the LOBBY state
   | /Message Type/ | Description             |
   |----------------+-------------------------|
   |           0x01 | REQUEST_LIST_SCENARIOS  |
   |           0x02 | REQUEST_CREATE_SCENARIO |
   |           0x03 | REQUEST_JOIN_SCENARIO   |
   
** SCENARIO State Requests
   #+CAPTION: messages sent by the client in the SCENARIO state
   | /Message Type/ | Description             |
   |----------------+-------------------------|
   |           0x04 | REQUEST_PLAYER_UPDATE   |
   |           0x05 | REQUEST_RETURN_TO_LOBBY |
   |           0x06 | REQUEST_DEBUG           |

*** REQUEST_PLAYER_UPDATE
    A PLAYER_UPDATE message should be sent by each client in a scenario at least
    once per tick.  This message contains contain two sections (in order):
    - TANK_INSTRUCTIONS
    - TANK_TARGETS

    Each section is a list containing data points that describe the tank at each
    index.  The number of tanks in these sections does not need to be sent to
    the server, as the server specifies how many tanks each user has in the
    first place.
      
    The data points for each section are formatted accordingly:

    #+CAPTION: PLAYER_UPDATE Section Formats
    | Section           | Data Point Format        |
    |-------------------+--------------------------|
    | TANK_INSTRUCTIONS | [8-bit instruction data] |
    | TANK_TARGET       | [32-bit x][32-bit y]     |


    The instruction data encodes what the tank is supposed to do on that turn:
    #+CAPTION: TANK_INSTRUCTIONS value map
    | Value | Name   | Description                                        |
    |     0 | MOVE   | The tank should move to TARGET                     |
    |     1 | FIRE   | The tank should shoot at TARGET                    |
    |     2 | REPAIR | TARGET is ignored.  Tank attempts to repair itself |
    
*** REQUEST_RETURN_TO_LOBBY
    There is no body associated with this message.  Upon reception by the
    server, the player associated with the connection will be sent to the lobby.

*** REQUEST_DEBUG
    
** Server Responses
   | /Message Type/ | Description              |
   |----------------+--------------------------|
   |           0x80 | RESPONSE_SCENARIO_TICK   |
   |           0x81 | RESPONSE_SUCCESS         |
   |           0x82 | RESPONSE_FAIL            |
   |           0x83 | RESPONSE_INVALID_REQUEST |

*** RESPONSE_SCENARIO_TICK
    In a particular scenario, all connected clients will will periodically
    recieve this message.  This ~SCENARIO_TICK~ message indicates that a turn in
    the scenario has passed, and the next one is beginning.  The tick message
    will also include a copy of the scenario state.
    
    /in future iterations of this specification, it may be necessary to limit
    how much information is sent.  It may be unnecessary to send a complete
    snapshot of everything in the secnario.  Only an update of what has changed
    since the previous tick may be required./

    the body of a ~SCENARIO_TICK~ will consist of four /sections/ in the
    following order:
    - USERNAMES
    - NUM_TANKS
    - TANK_STATES
    - TANK_POSITIONS

    Each /section/ will consist of N /entries/.  N is determined by the number
    of usernames in the USERNAMES section.

    The USERNAMES section will consist of ASCII usernames separated by commas.
    As previously mentioned, the number of usernames in this section determines
    the number of entries in subsequent sections.

    for example, a valid USERNAMES section for a scene with four users will look
    like this:
    
    : "MindM4ge202,StratS0rc3rer5,R1ddleRebel13,Cr4ftyConjurer11"

    The next section, NUM_TANKS, specifies how many tanks are associated with
    each user.  There will be N entries in this section.  Each entry will be a
    32-bit integer (big endian).  Continuing with the previous example, a valid
    NUM_TANKS section may be seen as follows:

    | bytes     | 0-3 | 4-7 | 8-11 | 12-15 |
    | NUM_TANKS |   5 |   5 |    8 |     8 |

    The next two sections, TANK_STATES and TANK_POSITIONS, consist of N entries,
    where each entry is a list of /data points/ related to the tank at that
    index.  Simply put, each /data point/ describes a tank that belongs to a
    user.

    In this iteration of the specificaion, the TANK_STATES section is reserved
    for future use.

    As previously described, the TANK_POSITIONS section contains N entries.
    Each entry is a list of data points which describe the position of the tank
    being indexed.  A tank position data point consists of an x and y value,
    each 32 bits in size.  Thus each data point will be 64 bits in length
    
*** RESPONSE_SUCCESS
*** RESPONSE_FAIL
*** RESPONSE_INVALID_REQUEST
* Feature List
** TODO Multiple Scenarios
   - [ ] The Server can create new scenarios
   - [ ] The Server can remove scenarios.  Scenarios will not be removed if
     there are players still in them.
   - [ ] Users can ask the server to create new scenarios
   - [ ] Users can join and leave any scenario

** TODO Map Generation
*** TODO Map File Format for Static Maps
*** TODO Procedurally Generated Maps
** TODO [#A] Algorithm Library for Tank Control
   - [ ] path finding
   - [ ] target finding
   - [ ] squadron movement commands
** TODO [#B] Foreign Function Interfaces
   - [ ] Common Lisp
   - [ ] Python
   - [ ] Rust
   - [ ] Node JS
   - [ ] Go
   - [ ] Zig
** TODO More Ergonomic Client
*** TODO GUI Features
    - [ ] buttons
    - [ ] text
    - [ ] proper interface with the rest of the program
    - [ ] integrated console
*** TODO Flags
*** TODO Tank Listing
*** DONE Help Command
    CLOSED: [2024-05-12 Sun 00:41]
    Help by itself should list all the commands and a summary for each of them.
    ~help COMMAND~ Will provide detailed information on each command.
**** implementation
     I created a folder for documentation, and put an org file with
     documentation for each command.  The program parses the org file to get the
     documentation.  This makes editing/adding docs for commands so much easier
     than hardcoding it in the C source.

** TODO Server Admin Tweaks
   These are additions that will flesh out the the server.
   
*** DONE Command Line Input
    CLOSED: [2024-05-14 Tue 13:02]
    should operate similarly to the client.  This will allow more graceful
    administration of the server.

*** TODO Console Commands [2/5]
    At a minimum, the server should have the following commands:
    - [X] quit
    - [ ] kick
    - [ ] remove-scenario
    - [ ] add-scenario
    - [X] help
      
*** TODO Logging
    Add logging to fascilitate debugging.  You should log things such as:
    - accepted connections.
    - messages recieved
    - integrity checks
    - random debug messages
* Code Quality List
  You need to do something about the vector structure.  You use it everywhere
  for a lot of things.  It is confusing what type is contained in a vector.
  Maybe some typedefs may be helpful?
  
** TODO [#A] update networking specification
   update the message functions to reflect what you have written in this
   document for the networking specification.

   - [4/4] player_update functions
     + [X] serialize
     + [X] deserialize
     + [X] init
     + [X] free
   - [0/4] scenario_tick functions
     + [ ] serialize
     + [ ] deserialize
     + [ ] init
     + [ ] free
** TODO [#A] Message Functions (All)
   [2024-05-12 Sun]
   - [ ] write unit tests
   - [ ] write documentation

** TODO [#B] vec_byte_ref
   - [ ] write documentation
   - [ ] unit test
   
** TODO [#B] vec_concat
   - [ ] write documentation
   - [ ] unit test

** TODO [#B] vector types
   It is frustrating working with vectors that have a seemingly unknown type
   whenever you declare them.

   #+begin_src c
     struct some_type {
         struct vector* v1;
         struct vector* v2;
         struct vector* v3;
     }
   #+end_src

   When I look at my code 3 months after I wrote this, I have no idea what type
   v1, v2, and v3 are.  I know that they are vectors, but vectors of what?  At a
   minimum, I want something in the declaration that shows the element type of
   the vector.  Then I can cast the data to the correct type when I am using it.

   #+begin_src C :flags -I./common/include common/src/vector.c
     #include "vector.h"
     #include <stdio.h>

     int main() {
         struct vector* my_vec = make_vector(sizeof(int), 10);
         for (int i = 0; i < 10; i++)
             vec_push(my_vec, &i);

         for (int i = 0; i < vec_len(my_vec); i++) {
             printf("%i ", *(int*)vec_ref(my_vec, i));
         }

         printf("\n");
         return 0;
     }
   #+end_src

   #+RESULTS:
   : 0 1 2 3 4 5 6 7 8 9

** DONE Cleanup Client
   CLOSED: [2024-05-13 Mon 22:11]
   [2024-05-12 Sun] Split the client up into functional units
   
** TODO [#C] Sort out game data in the common headers
   [2024-05-13 Mon] Move game-related header information, such as tank data,
   position coordinates, etc to a separate file.  Translation units that depend
   on game data but do not send messages to the server shouldn't have to include
   the whole networking stack.

* Bug Fix List
** TODO ~connect~ command
   <2024-05-11 Sat>
   
   client segfaults when entering an invalid input for the connect command

** TODO Disconnected users are retained on the server
   <2024-05-11 Sat>
   
   the server should clean up users that have disconnected, and shouldn't track
   them.

** DONE Segfaults on Message Reception
   CLOSED: [2024-05-11 Sat 14:15]
   <2024-05-11 Sat>

   1) I found the message type on incoming messages was invalid.  The message
      type is used to index into an array of function pointers.  Since it was
      invalid, it resulted in a seg fault.
      - solved by checking for valid message types.
   2) The message types were invalid because of a casting error.  I originally
      had:

      #+begin_src c
        body_size = *(int*)(buf->data + sizeof(enum message_type));
      #+end_src

      which was changed to:

      #+begin_src c
        body_size = *(int*)vec_dat(buf) + sizeof(enum message_type);
      #+end_src

      The cast has higher precedence than the addition, so some random value in
      memory was being used as the message type.

** TODO Message Network Ordering
   [2024-05-12 Sun] Messages are constructed using host order, little endian.  They need to be
   sent in network order, big endian.

