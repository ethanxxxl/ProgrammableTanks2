#+TITLE: Programable Tanks 2
#+AUTHOR: Ethan Smith
#+EMAIL: ethansmith.dev@gmail.com

#+STARTUP: logdone overview
#+TODO: TODO STARTED DOCUMENT | DONE CANCEL

* Overview
  this is my second attempt to create a game/simulation of AI tank combat.

  in my last attempt, I was bogged down with creating a graphics frontend first
  and then attaching the logic to the backend.  I never really got around to
  implementing the logic because of this.

  With this project, I will start with creating the game logic/backend first,
  then add the graphics front end.  To visualize what is going on, I will
  certainly implement a simple TUI.

* Core Constructs
  To start, the scope of these core concepts will be constrained.  The mechanics
  will be similar to the online MMO Screeps.

** Tanks
   can have different attributes which give it abilities.
   - Movement
   - Attack
   - Cargo
   - Sensor Packages

** World
   A map of the world does not necessarily need to be maintained.  However, a
   list of world objects will need to be maintained.

   position updates and actions will need to be validated to ensure there are no
   conflicts or intersections.

** Threading
   This program will be multithreaded.  Threads may be used to send commands,
   run callbacks, etc.

*** World Update Thread
    every game tick, all world object positions will be updated.

*** Networking Thread
    connected clients need to be able to receive game information from the
    server and send updates to the server.

    Unlike Screeps, where all processing is done on the server, Programmable
    Tanks will use distributed computation.  For a player's game objects to be
    updated, the client must send the updates to the server.  Of course, these
    updates will be validated to ensure that no nefarious activity is performed
    by the player.

*** Server Graphics Thread

* Gameplay
  tanks are the fundamental unit of this game.  They are remote-controlled, yet
  programable.  That is, once spawned, a tank will not do anything on its own.
  Every tick must be given instructions.  The player may submit instructions
  over the network as frequently or infrequently as they desire.

  - establish production?
  - control zones?
  - fight battles?
     
  Perhaps the gameplay could be modeled after =Escape from Tarkov=, or =Dayz=.
  No production would have to be constantly monitored, and there could be a
  variety of different game modes.

  You could have different "rooms," "scenarios," "insertion points," etc.
  essentially these would be different coordinate spaces for tanks, and is where
  any given scenario would run.  You would be given information about the
  scenario beforehand, and you would have to prep your tank team accordingly.
  Once inserted, your tank team would not be able to receive resupply and would
  have to complete the mission the be extracted.  players would always have a
  certain number of basic tanks, /but upgrades could be found on the battlefield
  and be equipped between scenarios./ (This mechanic, sourced from escape from
  Tarkov, may or may not be necessary.)

  players would want to write scripts to control their tanks and allow them to
  manage the battlefield semi-autonomously.  The battlefields will be relatively
  large, and ticks ideally would occur relatively often, so the tank commander
  will want to have strategic level control at game time.  tactical level
  control should be controlled programmatically.

** Scenarios or Battlefields
   not entirely sure about the nomenclature just yet.  A battlefield may have
   multiple objectives available.  Only one objective will be shown per player.
   An objective may be to defend a certain object or area, or perhaps the
   objective is to take that area.  multiple players will enter the battlefield,
   and their objectives may or may not conflict with each other.  However, the
   possible number of objectives will be fixed, so players can develop programs
   for specific objectives.


** Objectives
   
   These are the objectives that will be available to players in any given
   battlefield.
   
*** Defend / Destroy Structure
    
*** Capture the Flag

*** Kill Enenmy Tanks


    
** Tank Mechanics
   Every tick/turn, a tank can complete one of these (mutually exclusive)
   actions:
   - Movement
   - Firing
   - Repair

     The server will resolve healing first, followed by movement, then firing.

* Networking Specification
  :PROPERTIES:
  :header-args: :exports code
  :END:

  #+OPTIONS: ^:{}
  
  Messages will be sent using the S-Expression format described in the following
  section.

  All messages will follow the following general format:

  #+begin_src lisp
    (MESSAGE-TYPE BODY...)
  #+end_src
  
** Serialization Specification: CSEXPs
   The /csexp/, or canonical s-expression, is a superset of s-expressions that
   allows for compact data storage and structuring.  This document loosely
   follows an internet raft for S-expressions produced by Dr. Rivest.  The
   latest revision of this draft is provided by [[https://www.ietf.org/archive/id/draft-rivest-sexp-08.html][IETF]].  This specification will
   primarily focus on the *basic transport* representation described in the
   draft.

   The serialization format is summarized below.  Note that this specification
   does not strictly follow the draft referenced above.  Liberties have been
   taken for this specific use case.
  
   In addition to normal sexp rules, atoms may be formatted as a /netstring/.
   Netstrings are encoded as ~size:value~, where /size/ is the length of the atom
   in bytes, and the value is the byte sequence that composes the atom.

   Since it is possible to distinguish the atom without any whitespace
   separators, for netstring atoms, no trailing whitespace is necessary, and will
   be ignored.

   as an example, the following csexps represent identical data:
   : (5:hello17:this is some data9:there are1:55:sexps)
   : (hello |this is some data| |there are| 5 sexps)

   An atom may be tagged with a type by enclosing an atom in square brackets ~[]~
   directly before it.  For example, ~([int]53 [str] "dog" [3:bar] 5:ethan)~.
   Notice that since the brackets are reserved punctuation, trailing whitespace
   is ignored.
 
*** Character Sets
    - Reserved Punctuation
      + ( ) :: list notation
      + [ ] :: type annotation
      + |   :: atom character set extension
      + ""  :: string

    - Special use Characters
      + : :: netstring syntax
      + # :: denotes special representation (hex)

*** BNF for syntax
    note: copied from the first draft edition
   
    We use the following notation:
    - <x>* :: means 0 or more occurrences of <x>
    - <x>+ :: means 1 or more occurrences of <x>  
    - <x>? :: means 0 or 1 occurrences of <x>
    parentheses	are used for grouping, as in (<x> | <y>)*

    For canonical and basic transport:

    - <sexpr>           :: <string> | <list>
    - <string>          :: <display>? <simple-string> ;
    - <simple-string>   :: <raw> ;
    - <display>         :: "[" <simple-string> "]" ;
    - <raw>             :: <decimal> ":" <bytes> ;
    - <decimal>         :: <decimal-digit>+ ;
                           + Decimal numbers should have no unnecessary leading
                             zeros
    - <bytes>           :: any string of bytes, of the indicated length
    - <list>            :: "(" <sexp>* ")" ;
    - <decimal-digit>   :: "0" | ... | "9" ;
     

*** sructuring
*** Data Types
    - strings
    - integers
    - lists

    you could implement this serialization format as a subset of s-expressions.

    these have the benefit of not needing to transmit their length.
    Advantages:
    - human readable
    - easy to implement

    Cons:
    - may use significantly more space than necessary, especially when
      transmitting integers
    - may be slow to encode/decode


    you might also want to look at *csexps*.  these have every atom prefixed by
    their length and a colon

    the following csexp...
  

    for plain text data, there isn't much of an advantage over the regular sexps.
    But csexps can encode binary data as well.  after doing some research, it
    seems that these things were never fully standardized.  I am taking this to
    mean that I can work with them pretty much however I want. 
*** netstrings extension
    if colon is made a special character, IE, its use is reserved within an atom,
    then we can extend the netstrings capabilities.

    alternatively, we could use a non-printable character instead.  ex, if 0x02
    is in a place where a colon would normally be in a netstring, then the
    preceding characters have a predetermined meaning.
   
   

    - 0x30 - 0x39 :: ASCII Digits 0-9
    - 0x5b :: Type Start '['
    - 0x5d :: Type Stop ']'
    - 0x28 :: '('
    - 0x29 :: ')'
     
   
    | '0' | 00110000 |
    | '1' | 00110001 |
    | '2' |          |
    | '3' |          |
    | '4' |          |
    | '5' |          |
    | '6' |          |
    | '7' |          |
    | '8' |          |
    | '9' |          |
   

** Message Type Summary
   #+CAPTION: Summary of Messages
   | /Message Type/ | Description              |
   |----------------+--------------------------|
   |           0x00 | REQUEST_AUTHENTICATE     |
   |           0x01 | REQUEST_LIST_SCENARIOS   |
   |           0x02 | REQUEST_CREATE_SCENARIO  |
   |           0x03 | REQUEST_JOIN_SCENARIO    |
   |           0x04 | REQUEST_PLAYER_UPDATE    |
   |           0x05 | REQUEST_RETURN_TO_LOBBY  |
   |           0x06 | REQUEST_DEBUG            |
   |----------------+--------------------------|
   |           0x80 | RESPONSE_SCENARIO_TICK   |
   |           0x81 | RESPONSE_SUCCESS         |
   |           0x82 | RESPONSE_FAIL            |
   |           0x83 | RESPONSE_INVALID_REQUEST |
   
** IDLE State Requests
   #+CAPTION: Messages sent by the client in the IDLE state
   | /Message Type/ | Description              |
   |----------------+--------------------------|
   |           0x00 | REQUEST_AUTHENTICATE     |

   #+CAPTION: Message Format
   #+begin_src lisp
     (AUTHENTICATE USERNAME PASSWORD)
   #+end_src
   
** LOBBY State Requests
   #+CAPTION: Messages sent by the client in the LOBBY state
   | /Message Type/ | Description             |
   |----------------+-------------------------|
   |           0x01 | REQUEST_LIST_SCENARIOS  |
   |           0x02 | REQUEST_CREATE_SCENARIO |
   |           0x03 | REQUEST_JOIN_SCENARIO   |
   
   #+CAPTION: Message Formats
   #+begin_src lisp
     (LIST-SCENARIOS USERNAME PASSWORD)
     (CREATE-SCENARIO todo)
     (JOIN-SCENARIO NAME)
   #+end_src
   
** SCENARIO State Requests
   #+CAPTION: messages sent by the client in the SCENARIO state
   | /Message Type/ | Description             |
   |----------------+-------------------------|
   |           0x04 | REQUEST_PLAYER_UPDATE   |
   |           0x05 | REQUEST_RETURN_TO_LOBBY |
   |           0x06 | REQUEST_DEBUG           |

   #+CAPTION: Message Formats
   #+begin_src lisp
     (PLAYER-UPDATE (X Y X Y X Y X Y ...)
                     (CMD1 CMD2 CMD3 ...))
     (RETURN-TO-LOBBY)
     (DEBUG MESSAGE-STRING)
   #+end_src
    
** Server Responses
   | /Message Type/ | Description              |
   |----------------+--------------------------|
   |           0x80 | RESPONSE_SCENARIO_TICK   |
   |           0x81 | RESPONSE_SUCCESS         |
   |           0x82 | RESPONSE_FAIL            |
   |           0x83 | RESPONSE_INVALID_REQUEST |

   #+CAPTION: Message Formats
   #+begin_src lisp
     (SCENARIO-TICK (USERNAME1 (X Y X Y X Y ...))
                    (USERNAME2 (X Y X Y X Y ...))
                    (USERNAME3 (X Y X Y X Y ...))
                    ...)
     (SUCCESS)
     (FAIL)
     (INVALID-REQUEST)
   #+end_src

* Feature List
** TODO Multiple Scenarios
   - [ ] The Server can create new scenarios
   - [ ] The Server can remove scenarios.  Scenarios will not be removed if
     there are players still in them.
   - [ ] Users can ask the server to create new scenarios
   - [ ] Users can join and leave any scenario

** TODO Map Generation
*** TODO Map File Format for Static Maps
*** TODO Procedurally Generated Maps
** TODO [#A] Algorithm Library for Tank Control
   - [ ] path finding
   - [ ] target finding
   - [ ] squadron movement commands
** TODO [#B] Foreign Function Interfaces
   - [ ] Common Lisp
   - [ ] Python
   - [ ] Rust
   - [ ] Node JS
   - [ ] Go
   - [ ] Zig
** TODO More Ergonomic Client
*** TODO GUI Features
    - [ ] buttons
    - [ ] text
    - [ ] proper interface with the rest of the program
    - [ ] integrated console
*** TODO Flags
*** TODO Tank Listing
*** DONE Help Command
    CLOSED: [2024-05-12 Sun 00:41]
    Help by itself should list all the commands and a summary for each of them.
    ~help COMMAND~ Will provide detailed information on each command.
**** implementation
     I created a folder for documentation, and put an org file with
     documentation for each command.  The program parses the org file to get the
     documentation.  This makes editing/adding docs for commands so much easier
     than hardcoding it in the C source.

** TODO Server Admin Tweaks
   These are additions that will flesh out the server.
   
*** DONE Command Line Input
    CLOSED: [2024-05-14 Tue 13:02]
    should operate similarly to the client.  This will allow more graceful
    administration of the server.

*** TODO Console Commands [2/5]
    At a minimum, the server should have the following commands:
    - [X] quit
    - [ ] kick
    - [ ] remove-scenario
    - [ ] add-scenario
    - [X] help
      
*** TODO Logging
    Add logging to facilitate debugging.  You should log things such as:
    - accepted connections.
    - messages recieved
    - integrity checks
    - random debug messages
* Code Quality List
  You need to do something about the vector structure.  You use it everywhere
  for a lot of things.  It is confusing what type is contained in a vector.
  Maybe some typedefs may be helpful?
  
** TODO [#A] Message Functions (All)
   [2024-05-12 Sun]
   - [ ] write unit tests
   - [ ] write documentation

** CANCEL [#A] update networking specification
   CLOSED: [2024-05-21 Tue 01:04]
   update the message functions to reflect what you have written in this
   document for the networking specification.

   - [4/4] player_update functions
     + [X] serialize
     + [X] deserialize
     + [X] init
     + [X] free
   - [4/4] scenario_tick functions
     + [X] serialize
     + [X] deserialize
     + [X] init
     + [X] free

*** DONE Implement new functions in ~scenario.h~ [5/5]
    CLOSED: [2024-05-18 Sat 22:26]
    - [X] make_player_data
    - [X] free_player_data
    - [X] make_player_public_data
    - [X] player_public_data_get
    - [X] free_player_public_data
      
*** DONE write unit tests for message functions
    CLOSED: [2024-05-18 Sat 22:26]
    - [X] scenario_tick
    - [X] player_update

      I am trying to use pipes to simulate the network connection:
      #+begin_src C
        #include <unistd.h>
        #include <stdio.h>
        #include <sys/socket.h>

        int main() {
            int fd[2];
            pipe(fd);

            write(fd[1], "hello world!", 13);
            close(fd[1]);

            char buf[50];
            read(fd[0], buf, 50);

            printf("i got: %s", buf);
            close(fd[0]);

            return 0;
        }
      #+end_src

      #+RESULTS:
      : i got: hello world!

      The solution is that ~send/recv~ are different than ~write/read~.  The
      former only works on sockets, while the latter will work on either sockets
      or files (supposedly).
    
*** DONE revamp message headers.
    CLOSED: [2024-05-18 Sat 22:25]
    currently, there isn't even a structure associated with the message headers.
    The sizes are hardcoded, and the types aren't clear in the code.

    - [X] Make a message_header structure
    - [X] Update message code to use the header structure
    - [X] send header/body in a single write command

    This should be relatively easy to fix.  The message header is only dealt
    with once per message, not in every type of message (ie in the individual
    serialize funcitons.)
      
** TODO [#B] vec_byte_ref
   - [ ] write documentation
   - [ ] unit test
   
** TODO [#B] vec_concat
   - [ ] write documentation
   - [ ] unit test

** DONE [#B] Sort out game data in the common headers
   CLOSED: [2024-05-17 Fri 01:09]
   [2024-05-13 Mon] Move game-related header information, such as tank data,
   position coordinates, etc to a separate file.  Translation units that depend
   on game data but do not send messages to the server shouldn't have to include
   the whole networking stack.

   [2024-05-16 Thu] Additionally, make a standardized header file for player
   information.  Players can have public data, private data, etc.

** DONE Cleanup Client
   CLOSED: [2024-05-13 Mon 22:11]
   [2024-05-12 Sun] Split the client up into functional units
   
** TODO [#C] vector types
   It is frustrating working with vectors that have a seemingly unknown type
   whenever you declare them.

   #+begin_src c
     struct some_type {
         struct vector* v1;
         struct vector* v2;
         struct vector* v3;
     }
   #+end_src

   When I look at my code 3 months after I wrote this, I have no idea what type
   v1, v2, and v3 are.  I know that they are vectors, but vectors of what?  At a
   minimum, I want something in the declaration that shows the element type of
   the vector.  Then I can cast the data to the correct type when I am using it.

   #+begin_src C :flags -I./common/include common/src/vector.c
     #include "vector.h"
     #include <stdio.h>

     int main() {
         struct vector* my_vec = make_vector(sizeof(int), 10);
         for (int i = 0; i < 10; i++)
             vec_push(my_vec, &i);

         for (int i = 0; i < vec_len(my_vec); i++) {
             printf("%i ", *(int*)vec_ref(my_vec, i));
         }

         printf("\n");
         return 0;
     }
   #+end_src

   #+RESULTS:
   : 0 1 2 3 4 5 6 7 8 9


** STARTED [#A] implement a form of csexps
   You can also consider creating a bespoke serialization format (like you are
   already doing).  Instead of specifying message formats, you would specify
   serialization formats.  Message types would have to conform to that
   serialization standard.
   
** TODO Add error types for all project components
** TODO [#C] Improve message reception throughput
   you could probably simplify the message reception process.

   1. grab as much data as you can and throw it into a ring buffer.
   2. if you don't have enough data to complete a message, go to [1]
   3. take the data, and make a message.  throw the message at the end of a
      linked list.

   This all could happen in its own thread, so you could separate the message
   processing and message reception if necessary.

* Bug Fix List
** TODO ~connect~ command
   <2024-05-11 Sat>
   
   client segfaults when entering an invalid input for the connect command

** TODO Disconnected users are retained on the server
   <2024-05-11 Sat>
   
   the server should clean up users that have disconnected, and shouldn't track
   them.

** DONE Segfaults on Message Reception
   CLOSED: [2024-05-11 Sat 14:15]
   <2024-05-11 Sat>

   1) I found the message type on incoming messages was invalid.  The message
      type is used to index into an array of function pointers.  Since it was
      invalid, it resulted in a seg fault.
      - solved by checking for valid message types.
   2) The message types were invalid because of a casting error.  I originally
      had:

      #+begin_src c
        body_size = *(int*)(buf->data + sizeof(enum message_type));
      #+end_src

      which was changed to:

      #+begin_src c
        body_size = *(int*)vec_dat(buf) + sizeof(enum message_type);
      #+end_src

      The cast has higher precedence than the addition, so some random value in
      memory was being used as the message type.

** TODO Message Network Ordering
   [2024-05-12 Sun] Messages are constructed using host order, little endian.  They need to be
   sent in network order, big endian.
